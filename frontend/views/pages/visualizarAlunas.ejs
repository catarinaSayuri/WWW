<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Lista de Alunas</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #6a0dad;
      /* Um roxo mais vibrante */
      --secondary-color: #4C0D38;
      /* Um roxo mais claro */
      --accent-color: #ff69b4;
      /* Rosa choque para detalhes */
      --text-dark: #333;
      --text-light: #f4f4f4;
      --bg-light: #fcf2f3;
      --card-bg: #ffffff;
      --shadow-light: rgba(0, 0, 0, 0.1);
      --shadow-medium: rgba(0, 0, 0, 0.2);
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--bg-light);
      margin: 0;
      padding: 0;
      color: var(--text-dark);
      line-height: 1.6;
    }

    header {
      background: #4C0D38;
      height: 80px;
      display: flex;
      align-items: center;
      padding: 0 25px;
      box-shadow: 0 4px 10px var(--shadow-medium);
      color: var(--text-light);
    }

    header img {
      height: 50px;
      /* Tamanho ajustado para o logo */
      margin-right: 15px;
    }

    h1 {
      color: #4C0D38;
      text-align: center;
      margin: 40px 0 30px;
      font-size: 2.5em;
      font-weight: 600;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }

    .add-button {
      display: inline-block;
      margin-bottom: 30px;
      background-color: var(--accent-color);
      color: var(--text-light);
      padding: 12px 25px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 600;
      transition: background-color 0.3s ease, transform 0.2s ease;
      box-shadow: 0 3px 8px var(--shadow-light);
    }

    .add-button:hover {
      background-color: #e04b9c;
      /* Um rosa um pouco mais escuro no hover */
      transform: translateY(-2px);
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 25px;
      padding-bottom: 50px;
    }

    .card {
      background: var(--card-bg);
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 5px 15px var(--shadow-light);
      text-align: center;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 20px var(--shadow-medium);
    }

    .card img {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--secondary-color);
      margin-bottom: 15px;
      transition: border-color 0.3s ease;
    }

    .card:hover img {
      border-color: var(--accent-color);
    }

    .card h2 {
      font-size: 1.6em;
      margin: 10px 0 5px;
      color: var(--primary-color);
      font-weight: 600;
    }

    .card p {
      font-size: 0.95em;
      color: #666;
      margin: 0;
    }

    .no-data {
      color: #888;
      text-align: center;
      font-style: italic;
      padding: 50px 0;
      font-size: 1.2em;
    }
  </style>
</head>

<body>
  <header>
    <img src="/frontend/views/assets/logoGrace.png" alt="Logo Borboleta" />
  </header>

  <div class="container">
    <h1>Grace Hopper</h1>

    <p>A potência do Grace está em quem faz parte dele!</p>
    <a href="/adicionarAlunas" class="add-button">Adicionar Nova Aluna</a>



    <div id="alunasContainer">
      <p class="no-data">Carregando alunas...</p>
    </div>
  </div>

  <script>
    // Função para criar um card de aluna
    function criarCard(aluna) {
      const card = document.createElement('div');
      card.className = 'card';

      const img = document.createElement('img');
      img.src = aluna.imagem_url || 'https://via.placeholder.com/120/9370db/ffffff?text=Aluna'; // Melhor placeholder
      img.alt = aluna.nome_exibicao || aluna.nome;

      const nome = document.createElement('h2');
      nome.textContent = aluna.nome_exibicao || aluna.nome || 'Nome Não Informado';

      const info = document.createElement('p');
      info.textContent = `${aluna.curso || 'Curso Não Informado'} - ${aluna.semestre || 'Semestre Não Informado'}`;

      const bio = document.createElement('p');
      bio.textContent = `${aluna.biografia || 'biografia Não informada'} - ${aluna.semestre || 'Semestre Não informada'}`;
      bio.textContent = `${aluna.biografia || 'biografia Não informada'} - ${aluna.semestre || 'Semestre Não informada'}`;

      card.appendChild(img);
      card.appendChild(nome);
      card.appendChild(info);

      return card;
    }

    // Função para buscar as alunas e renderizar
    async function carregarAlunas() {
      const container = document.getElementById('alunasContainer');
      container.innerHTML = ''; // Limpa o container antes de adicionar conteúdo

      try {
        const response = await fetch('/alunas');
        if (!response.ok) {
          throw new Error(`Erro ao buscar alunas: ${response.status} ${response.statusText}`);
        }
        const alunas = await response.json();
        console.log('Dados recebidos:', alunas);

        if (!alunas.data || !alunas.data.length) { // Verifica alunas.data.length
          container.innerHTML = '<p class="no-data">Nenhuma aluna cadastrada ainda.</p>';
          return;
        }

        const grid = document.createElement('div');
        grid.className = 'grid';

        alunas.data.forEach(aluna => {
          grid.appendChild(criarCard(aluna));
        });

        container.appendChild(grid);

      } catch (error) {
        console.error('Erro:', error);
        container.innerHTML = `<p class="no-data">Erro ao carregar alunas: ${error.message}. Tente novamente mais tarde.</p>`;
      }
    }

    carregarAlunas();
  </script>
</body>

</html>